{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the VisSieve Project Documentation This document will help users understand the goals of the project, and contributors understand the layout and techniques involved in data collection, processing, and visualization. Contribution Wiki wiki is the main location to look for information about how this project is organized and what choices were made at the time of development","title":"Welcome to the VisSieve Project Documentation"},{"location":"#welcome-to-the-vissieve-project-documentation","text":"This document will help users understand the goals of the project, and contributors understand the layout and techniques involved in data collection, processing, and visualization.","title":"Welcome to the VisSieve Project Documentation"},{"location":"#contribution-wiki","text":"wiki is the main location to look for information about how this project is organized and what choices were made at the time of development","title":"Contribution Wiki"},{"location":"wiki/","text":"Wiki This space is to provide resources for the project, such as important links, procedures, hints for other tools involved in each project stage, etc. Links Devin\u2019s https://github.com/DevinBayly/vis-seive/ (MAIN) Carolina\u2019s https://github.com/carolinarr/vis-sieve (temporary) PDF Storage - https://data.cyverse.org/dav-anon/iplant/home/baylyd/vis_sieve/ https://docs.openalex.org/ Label Studio - http://149.165.169.100:8080/ CSR account: c.roe email, low sec password Project Stages url gathering pdf retrieval (get figs?) visualization 1. URL Gathering Stage https://github.com/DevinBayly/vis-seive 2. PDF grabbing Cyverse Datastore link https://data.cyverse.org/dav-anon/iplant/home/baylyd/vis_sieve/ Example python hear_me_ROR_script.py run: python hear_me_ROR_script.py 2017 2018 --database ../database/publications.db --content_root ../database/content python hear_me_ROR_script.py --help to see all the options 3. labeling http://149.165.169.100:8080/user/login/ go ahead adn try to log in to and attempt to label a few things 4. Visualization Stage Observable Framework more details to come, but https://observablehq.com/framework/what-is-framework is a promising start. Note, it\u2019s recommended to setup a code space from the vissieve repo. https://devinbayly.observablehq.cloud/hello-duckdb/vissieve-test Procedures Docker Container + Reload Setup Instructions Follow \"Setup docker container\" instructions here: https://github.com/DevinBayly/vis-sieve/tree/main/visualization BUT use this docker command instead: docker run -it --rm --mount type=bind,source=\"$(pwd)\",target=/place -p 8080:8080 ghcr.io/devinbayly/vis_sieve_d3 Notes ghcr = github-container-registry See devin's repo to view what's installed in container when you open it: https://github.com/DevinBayly/github-ci/blob/main/vis_sieve_d3 If you open with docker command from vis-sieve repo (not updated command mentioned above), then you would run the following commands instead (once docker container opens): apt update apt install npm note: takes awhile npm install -g reload note: -g makes it global, so that any directory we go into we can run this reload command Navigate to 'place' folder: cd place Run the reload command: reload Open browser and input URL: localhost:8080 Change index.html file, and whenever you save, page should update To exit: I think ' Ctrl + C ' to exit reload? I think ' exit ' to exit docker container? Database Information Database Information Notion Shortcut To indent bulleted list - Tab To unindent bulleted list - Shift + Tab","title":"Wiki"},{"location":"wiki/#wiki","text":"This space is to provide resources for the project, such as important links, procedures, hints for other tools involved in each project stage, etc.","title":"Wiki"},{"location":"wiki/#links","text":"Devin\u2019s https://github.com/DevinBayly/vis-seive/ (MAIN) Carolina\u2019s https://github.com/carolinarr/vis-sieve (temporary) PDF Storage - https://data.cyverse.org/dav-anon/iplant/home/baylyd/vis_sieve/ https://docs.openalex.org/ Label Studio - http://149.165.169.100:8080/ CSR account: c.roe email, low sec password","title":"Links"},{"location":"wiki/#project-stages","text":"url gathering pdf retrieval (get figs?) visualization","title":"Project Stages"},{"location":"wiki/#1-url-gathering-stage","text":"https://github.com/DevinBayly/vis-seive","title":"1. URL Gathering Stage"},{"location":"wiki/#2-pdf-grabbing","text":"Cyverse Datastore link https://data.cyverse.org/dav-anon/iplant/home/baylyd/vis_sieve/ Example python hear_me_ROR_script.py run: python hear_me_ROR_script.py 2017 2018 --database ../database/publications.db --content_root ../database/content python hear_me_ROR_script.py --help to see all the options","title":"2. PDF grabbing"},{"location":"wiki/#3-labeling","text":"http://149.165.169.100:8080/user/login/ go ahead adn try to log in to and attempt to label a few things","title":"3. labeling"},{"location":"wiki/#4-visualization-stage","text":"","title":"4. Visualization Stage"},{"location":"wiki/#observable-framework","text":"more details to come, but https://observablehq.com/framework/what-is-framework is a promising start. Note, it\u2019s recommended to setup a code space from the vissieve repo. https://devinbayly.observablehq.cloud/hello-duckdb/vissieve-test","title":"Observable Framework"},{"location":"wiki/#procedures","text":"","title":"Procedures"},{"location":"wiki/#docker-container-reload-setup-instructions","text":"Follow \"Setup docker container\" instructions here: https://github.com/DevinBayly/vis-sieve/tree/main/visualization BUT use this docker command instead: docker run -it --rm --mount type=bind,source=\"$(pwd)\",target=/place -p 8080:8080 ghcr.io/devinbayly/vis_sieve_d3 Notes ghcr = github-container-registry See devin's repo to view what's installed in container when you open it: https://github.com/DevinBayly/github-ci/blob/main/vis_sieve_d3 If you open with docker command from vis-sieve repo (not updated command mentioned above), then you would run the following commands instead (once docker container opens): apt update apt install npm note: takes awhile npm install -g reload note: -g makes it global, so that any directory we go into we can run this reload command Navigate to 'place' folder: cd place Run the reload command: reload Open browser and input URL: localhost:8080 Change index.html file, and whenever you save, page should update To exit: I think ' Ctrl + C ' to exit reload? I think ' exit ' to exit docker container?","title":"Docker Container + Reload Setup Instructions"},{"location":"wiki/#database-information","text":"Database Information","title":"Database Information"},{"location":"wiki/#notion-shortcut","text":"To indent bulleted list - Tab To unindent bulleted list - Shift + Tab","title":"Notion Shortcut"},{"location":"database/database_information/","text":"Database Information Latest Database File publications.db /page Entity Results Diagram draw.io file: publication_database_er.drawio Database Code The code to create and populate the database is in the GitHub repo. Creating: https://github.com/DevinBayly/vis-sieve/blob/main/database/create_database.py Filling: https://github.com/DevinBayly/vis-sieve/blob/main/openalex_code/hear_me_ROR_script.py Note that filling the database right now is incredibly slow, I think from stripping PDFs and figures. Local File Structure content [paper id] pdf file (paper_id.pdf) figures [figures indexed by integer 00-99] (.png/.jpg/etc.) Notes: Add paper properties, like topics Note, rn a paper is connected to an institution only by author. If an author worked at the uofa then went somewhere else, all their works would be counted under both uofa and the other place. Is that an issue? affiliation is a author attribute that has some possible time associated with it, https://docs.openalex.org/api-entities/authors/author-object , digging into this https://api.openalex.org/authors?filter=affiliations.institution.ror:03m2x1q45+00hx57361 would be someone with both princeton and UA affiliation https://openalex.org/authors/A5072674162 for example. This person was at u of a in 2020 and princeton plasma in 2017 look at the results with these two queries to see if there\u2019s the overlap we were afraid of then we can look for their works in 2020, assumption is that they would also show up in the institutional pass for 2020 from u of arizona. https://api.openalex.org/works?filter=publication_year:2020,authorships.author.id:A5072674162,authorships.institutions.ror:03m2x1q45 then if we look for works in 2017 we will see the ones from princeton, https://api.openalex.org/works?filter=publication_year:2017,authorships.author.id:A5072674162,authorships.institutions.ror:00hx57361 no overlap or are we talking about a case where an user queries the database for the works of a particular author? problem statement is u of a work counts being correct vs suggestion is that we auto populate a field on paper that just borrows the ROR that is provided when the publication by year process is going Database Subset and SQL Practice It's not a super big file so I\u2019ll just put it here, note there are no figures yet so no need to worry about file structure. publications.db Code to generate database ```sql CREATE TABLE author ( id BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL ); CREATE TABLE institution ( id BIGINT PRIMARY KEY, roi VARCHAR(20) NOT NULL, name VARCHAR(100) NOT NULL ); CREATE TABLE residence ( au_id BIGINT, inst_id BIGINT, PRIMARY KEY (au_id, inst_id), FOREIGN KEY (au_id) REFERENCES author(id), FOREIGN KEY (inst_id) REFERENCES institution(id) ); CREATE TABLE paper ( id BIGINT PRIMARY KEY, title VARCHAR(200) NOT NULL, doi VARCHAR(100), publication_date DATE ); CREATE TABLE contribution ( au_id BIGINT, paper_id BIGINT, PRIMARY KEY (au_id, paper_id), FOREIGN KEY (au_id) REFERENCES author(id), FOREIGN KEY (paper_id) REFERENCES paper(id) ); CREATE TABLE figure ( id INTEGER PRIMARY KEY, paper_id BIGINT, local_path VARCHAR(100), server_path VARCHAR(100), FOREIGN KEY (paper_id) REFERENCES paper(id) ); CREATE TABLE figure_property ( name VARCHAR(100), int_value INTEGER, string_value VARCHAR(100), figure_id INTEGER, FOREIGN KEY (figure_id) REFERENCES figure(id), PRIMARY KEY (name, figure_id) ); ``` If you want to use ChatGPT, I\u2019d recommend something along the lines of ``` Below is the code to generate an SQL database: [All the code above] END OF SQL CODE Write a query to [find the number of authors] ``` But feel free to see what works for you Some information to note: Each block is called a table, each variable is called a column Common data types Bigint is an int64 (some openalex ids were bigger than the int32 cap) Date is a date that's always formatted like \u201cyyyy-mm-dd\u201d Varchar is short for variable (number of) characters and can have between 0 and the number of characters listed Keys Items in bold are primary keys, meaning every entry must have this property and there cannot be duplicates of it. For example, author has a primary key id , meaning every author in the table has an id, and no two authors share an id. For paper, institution, and author, this is the id specified by openalex. Note that a paper, an author, and an institution may have the same id, open alex gets around this by appending an \u201cW\u201d (work), \u201cA\u201d, or \u201cI\u201d before the id. If a table has multiple columns in bold, that means those columns form a composite primary key, meaning none of the composite columns can be NULL, and every entry must be a unique combination of the columns. In the example above, each contribution entry must have both an author and a paper, and no two entries can share the same combination of author and paper. (001, 333) and (001, 444) would be okay, (001, 333) and (002, 333) would be okay, but (001, 333) and (001, 333) would not be okay. Columns that are underlined are called foreign keys, meaning they reference the primary key of another table. For example, contribution.au_id references author.id. The lines (less important) The lines between each table don't actually represent anything in the database, just concepts. Lines terminating in the double bars represent \u201conly one\u201d while the \u201c|<\u201d means one or more, and \u201c<\u201d means any number. For example, in the above diagram, each author can have one or more contribution, but each contribution can only reference one author. Getting started with DuckDB Id recommend using it with python so it'll integrate with any other work we do, but that's of course up to you, there's documentation on their website if you wanna do it a different way. It can be installed pretty easily with pip. pip install duckdb Next, in python, you'll want to import it. I don't think there's a common import name but I've just been calling it db import duckdb as db Then, any time you want to use the database, you'll open it, run the queries followed by fetching, then close it. con = db.connect('publications.db') # Gets the number of papers con.execute(\"\"\" SELECT COUNT(*) FROM paper \"\"\") print(con.fetchall()) # Gets all unique institution names con.execute(\"\"\" SELECT DISTINCT name FROM institution \"\"\") print(con.fetchall()) con.close() Theres a lot of good resources for info on SQL, one I like is https://www.w3schools.com/sql Queries to try Here\u2019s a couple of questions to try to answer by querying the database How many institutions are in the database? sql SELECT COUNT(*) FROM institution What is the name of the institution with id=20089843 ? sql SELECT name FROM institution WHERE id = 20089843 What are all the institutions that have \u201cArizona\u201d in the name? (Hint: use LIKE ) sql SELECT name FROM institution WHERE name LIKE '%Arizona%' Who are three authors from \u201cPrinceton University\u201d? sql SELECT author.name FROM author JOIN residence ON author.id = residence.au_id JOIN institution ON residence.inst_id = institution.id WHERE institution.name = 'Princeton University' LIMIT 3 Note that indentation and new lines are not important, just the words. You could put that all on one line and it would work. What are the titles of all the papers coauthored by people affiliated with \u201cPrinceton University\u201d sql SELECT DISTINCT paper.title FROM paper JOIN contribution ON paper.id = contribution.paper_id JOIN author ON contribution.au_id = author.id JOIN residence ON author.id = residence.au_id JOIN institution ON residence.inst_id = institution.id WHERE institution.name = 'Princeton University' How many papers are there that have no authors affiliated with the \u201cUniversity of Arizona\u201d Incorrect from ChatGPT: sql SELECT COUNT(DISTINCT p.id) FROM paper p LEFT JOIN contribution c ON p.id = c.paper_id LEFT JOIN residence r ON c.au_id = r.au_id LEFT JOIN institution i ON r.inst_id = i.id WHERE i.name IS NULL OR i.name != 'University of Arizona'; This will get all the papers that have anyone unaffiliated with the UofA, rather than everyone unaffiliated. After another prompt reminding it of its goal Correct from ChatGPT: sql SELECT COUNT(*) FROM paper WHERE id NOT IN ( SELECT DISTINCT paper_id FROM contribution JOIN residence ON contribution.au_id = residence.au_id JOIN institution ON residence.inst_id = institution.id WHERE institution.name = 'University of Arizona' ); It\u2019s weird that the answer is 27 (you can verify by manually looking through the db) as the whole point of this query is to find papers affiliated with the U of A. Looking into it, the issue is with the database creation and not adding all of an author's affiliations, the query works correctly. I\u2019ll patch this but at least for the DB file above, this makes for a good exercise. support@openalex.org","title":"Database Information"},{"location":"database/database_information/#database-information","text":"","title":"Database Information"},{"location":"database/database_information/#latest-database-file","text":"publications.db /page","title":"Latest Database File"},{"location":"database/database_information/#entity-results-diagram","text":"draw.io file: publication_database_er.drawio","title":"Entity Results Diagram"},{"location":"database/database_information/#database-code","text":"The code to create and populate the database is in the GitHub repo. Creating: https://github.com/DevinBayly/vis-sieve/blob/main/database/create_database.py Filling: https://github.com/DevinBayly/vis-sieve/blob/main/openalex_code/hear_me_ROR_script.py Note that filling the database right now is incredibly slow, I think from stripping PDFs and figures.","title":"Database Code"},{"location":"database/database_information/#local-file-structure","text":"content [paper id] pdf file (paper_id.pdf) figures [figures indexed by integer 00-99] (.png/.jpg/etc.) Notes: Add paper properties, like topics Note, rn a paper is connected to an institution only by author. If an author worked at the uofa then went somewhere else, all their works would be counted under both uofa and the other place. Is that an issue? affiliation is a author attribute that has some possible time associated with it, https://docs.openalex.org/api-entities/authors/author-object , digging into this https://api.openalex.org/authors?filter=affiliations.institution.ror:03m2x1q45+00hx57361 would be someone with both princeton and UA affiliation https://openalex.org/authors/A5072674162 for example. This person was at u of a in 2020 and princeton plasma in 2017 look at the results with these two queries to see if there\u2019s the overlap we were afraid of then we can look for their works in 2020, assumption is that they would also show up in the institutional pass for 2020 from u of arizona. https://api.openalex.org/works?filter=publication_year:2020,authorships.author.id:A5072674162,authorships.institutions.ror:03m2x1q45 then if we look for works in 2017 we will see the ones from princeton, https://api.openalex.org/works?filter=publication_year:2017,authorships.author.id:A5072674162,authorships.institutions.ror:00hx57361 no overlap or are we talking about a case where an user queries the database for the works of a particular author? problem statement is u of a work counts being correct vs suggestion is that we auto populate a field on paper that just borrows the ROR that is provided when the publication by year process is going","title":"Local File Structure"},{"location":"database/database_information/#database-subset-and-sql-practice","text":"It's not a super big file so I\u2019ll just put it here, note there are no figures yet so no need to worry about file structure. publications.db Code to generate database ```sql CREATE TABLE author ( id BIGINT PRIMARY KEY, name VARCHAR(100) NOT NULL ); CREATE TABLE institution ( id BIGINT PRIMARY KEY, roi VARCHAR(20) NOT NULL, name VARCHAR(100) NOT NULL ); CREATE TABLE residence ( au_id BIGINT, inst_id BIGINT, PRIMARY KEY (au_id, inst_id), FOREIGN KEY (au_id) REFERENCES author(id), FOREIGN KEY (inst_id) REFERENCES institution(id) ); CREATE TABLE paper ( id BIGINT PRIMARY KEY, title VARCHAR(200) NOT NULL, doi VARCHAR(100), publication_date DATE ); CREATE TABLE contribution ( au_id BIGINT, paper_id BIGINT, PRIMARY KEY (au_id, paper_id), FOREIGN KEY (au_id) REFERENCES author(id), FOREIGN KEY (paper_id) REFERENCES paper(id) ); CREATE TABLE figure ( id INTEGER PRIMARY KEY, paper_id BIGINT, local_path VARCHAR(100), server_path VARCHAR(100), FOREIGN KEY (paper_id) REFERENCES paper(id) ); CREATE TABLE figure_property ( name VARCHAR(100), int_value INTEGER, string_value VARCHAR(100), figure_id INTEGER, FOREIGN KEY (figure_id) REFERENCES figure(id), PRIMARY KEY (name, figure_id) ); ``` If you want to use ChatGPT, I\u2019d recommend something along the lines of ``` Below is the code to generate an SQL database: [All the code above] END OF SQL CODE Write a query to [find the number of authors] ``` But feel free to see what works for you Some information to note: Each block is called a table, each variable is called a column Common data types Bigint is an int64 (some openalex ids were bigger than the int32 cap) Date is a date that's always formatted like \u201cyyyy-mm-dd\u201d Varchar is short for variable (number of) characters and can have between 0 and the number of characters listed Keys Items in bold are primary keys, meaning every entry must have this property and there cannot be duplicates of it. For example, author has a primary key id , meaning every author in the table has an id, and no two authors share an id. For paper, institution, and author, this is the id specified by openalex. Note that a paper, an author, and an institution may have the same id, open alex gets around this by appending an \u201cW\u201d (work), \u201cA\u201d, or \u201cI\u201d before the id. If a table has multiple columns in bold, that means those columns form a composite primary key, meaning none of the composite columns can be NULL, and every entry must be a unique combination of the columns. In the example above, each contribution entry must have both an author and a paper, and no two entries can share the same combination of author and paper. (001, 333) and (001, 444) would be okay, (001, 333) and (002, 333) would be okay, but (001, 333) and (001, 333) would not be okay. Columns that are underlined are called foreign keys, meaning they reference the primary key of another table. For example, contribution.au_id references author.id. The lines (less important) The lines between each table don't actually represent anything in the database, just concepts. Lines terminating in the double bars represent \u201conly one\u201d while the \u201c|<\u201d means one or more, and \u201c<\u201d means any number. For example, in the above diagram, each author can have one or more contribution, but each contribution can only reference one author.","title":"Database Subset and SQL Practice"},{"location":"database/database_information/#getting-started-with-duckdb","text":"Id recommend using it with python so it'll integrate with any other work we do, but that's of course up to you, there's documentation on their website if you wanna do it a different way. It can be installed pretty easily with pip. pip install duckdb Next, in python, you'll want to import it. I don't think there's a common import name but I've just been calling it db import duckdb as db Then, any time you want to use the database, you'll open it, run the queries followed by fetching, then close it. con = db.connect('publications.db') # Gets the number of papers con.execute(\"\"\" SELECT COUNT(*) FROM paper \"\"\") print(con.fetchall()) # Gets all unique institution names con.execute(\"\"\" SELECT DISTINCT name FROM institution \"\"\") print(con.fetchall()) con.close() Theres a lot of good resources for info on SQL, one I like is https://www.w3schools.com/sql","title":"Getting started with DuckDB"},{"location":"database/database_information/#queries-to-try","text":"Here\u2019s a couple of questions to try to answer by querying the database How many institutions are in the database? sql SELECT COUNT(*) FROM institution What is the name of the institution with id=20089843 ? sql SELECT name FROM institution WHERE id = 20089843 What are all the institutions that have \u201cArizona\u201d in the name? (Hint: use LIKE ) sql SELECT name FROM institution WHERE name LIKE '%Arizona%' Who are three authors from \u201cPrinceton University\u201d? sql SELECT author.name FROM author JOIN residence ON author.id = residence.au_id JOIN institution ON residence.inst_id = institution.id WHERE institution.name = 'Princeton University' LIMIT 3 Note that indentation and new lines are not important, just the words. You could put that all on one line and it would work. What are the titles of all the papers coauthored by people affiliated with \u201cPrinceton University\u201d sql SELECT DISTINCT paper.title FROM paper JOIN contribution ON paper.id = contribution.paper_id JOIN author ON contribution.au_id = author.id JOIN residence ON author.id = residence.au_id JOIN institution ON residence.inst_id = institution.id WHERE institution.name = 'Princeton University' How many papers are there that have no authors affiliated with the \u201cUniversity of Arizona\u201d Incorrect from ChatGPT: sql SELECT COUNT(DISTINCT p.id) FROM paper p LEFT JOIN contribution c ON p.id = c.paper_id LEFT JOIN residence r ON c.au_id = r.au_id LEFT JOIN institution i ON r.inst_id = i.id WHERE i.name IS NULL OR i.name != 'University of Arizona'; This will get all the papers that have anyone unaffiliated with the UofA, rather than everyone unaffiliated. After another prompt reminding it of its goal Correct from ChatGPT: sql SELECT COUNT(*) FROM paper WHERE id NOT IN ( SELECT DISTINCT paper_id FROM contribution JOIN residence ON contribution.au_id = residence.au_id JOIN institution ON residence.inst_id = institution.id WHERE institution.name = 'University of Arizona' ); It\u2019s weird that the answer is 27 (you can verify by manually looking through the db) as the whole point of this query is to find papers affiliated with the U of A. Looking into it, the issue is with the database creation and not adding all of an author's affiliations, the query works correctly. I\u2019ll patch this but at least for the DB file above, this makes for a good exercise. support@openalex.org","title":"Queries to try"}]}